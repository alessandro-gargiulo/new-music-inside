// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicInside.DataAccessLayer.Context;

namespace MusicInside.DataAccessLayer.Migrations
{
    [DbContext(typeof(MusicInsideDbContext))]
    partial class MusicInsideDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MusicInside.DataAccessLayer.AssociationClasses.SongArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId");

                    b.Property<bool?>("IsPrincipalArtist");

                    b.Property<int>("SongId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.ToTable("SongArtist");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.AssociationClasses.SongGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenreId");

                    b.Property<int>("SongId");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("SongId");

                    b.ToTable("SongGenre");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.AssociationClasses.SongMoment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MomentId");

                    b.Property<int>("SongId");

                    b.HasKey("Id");

                    b.HasIndex("MomentId");

                    b.HasIndex("SongId");

                    b.ToTable("SongMoment");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoverId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CoverId")
                        .IsUnique()
                        .HasFilter("[CoverId] IS NOT NULL");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArtName");

                    b.Property<int?>("BirthYear");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool?>("IsBand");

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.Models.CoverFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Extension");

                    b.Property<string>("FileName");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.ToTable("CoverFile");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.Models.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Extension");

                    b.Property<string>("FileName");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.ToTable("MediaFile");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.Models.Moment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Moment");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.Models.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltText");

                    b.Property<string>("Header");

                    b.Property<int?>("Order");

                    b.Property<string>("Section");

                    b.Property<string>("Source");

                    b.Property<string>("Text");

                    b.Property<DateTime?>("ValidityFrom");

                    b.Property<DateTime?>("ValidityTo");

                    b.HasKey("Id");

                    b.ToTable("Slide");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlbumId")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("MediaId");

                    b.Property<int?>("StatisticId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("TrackNo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("MediaId")
                        .IsUnique()
                        .HasFilter("[MediaId] IS NOT NULL");

                    b.HasIndex("StatisticId")
                        .IsUnique()
                        .HasFilter("[StatisticId] IS NOT NULL");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.Models.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("LastPlay");

                    b.Property<int>("NumPlay")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Statistic");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.AssociationClasses.SongArtist", b =>
                {
                    b.HasOne("MusicInside.DataAccessLayer.Models.Artist", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicInside.DataAccessLayer.Models.Song", "Song")
                        .WithMany("Artists")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.AssociationClasses.SongGenre", b =>
                {
                    b.HasOne("MusicInside.DataAccessLayer.Models.Genre", "Genre")
                        .WithMany("Songs")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicInside.DataAccessLayer.Models.Song", "Song")
                        .WithMany("Genres")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.AssociationClasses.SongMoment", b =>
                {
                    b.HasOne("MusicInside.DataAccessLayer.Models.Moment", "Moment")
                        .WithMany("Songs")
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicInside.DataAccessLayer.Models.Song", "Song")
                        .WithMany("Moments")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.Models.Album", b =>
                {
                    b.HasOne("MusicInside.DataAccessLayer.Models.CoverFile", "Cover")
                        .WithOne("Album")
                        .HasForeignKey("MusicInside.DataAccessLayer.Models.Album", "CoverId");
                });

            modelBuilder.Entity("MusicInside.DataAccessLayer.Models.Song", b =>
                {
                    b.HasOne("MusicInside.DataAccessLayer.Models.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicInside.DataAccessLayer.Models.MediaFile", "Media")
                        .WithOne("Song")
                        .HasForeignKey("MusicInside.DataAccessLayer.Models.Song", "MediaId");

                    b.HasOne("MusicInside.DataAccessLayer.Models.Statistic", "Statistic")
                        .WithOne("Song")
                        .HasForeignKey("MusicInside.DataAccessLayer.Models.Song", "StatisticId");
                });
#pragma warning restore 612, 618
        }
    }
}
